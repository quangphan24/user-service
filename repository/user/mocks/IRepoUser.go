// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (

	mock "github.com/stretchr/testify/mock"
	"user-service/model"
)

// IRepoUser is an autogenerated mock type for the IRepoUser type
type IRepoUser struct {
	mock.Mock
}

// CreateRefreshToken provides a mock function with given fields: rt
func (_m *IRepoUser) CreateRefreshToken(rt *model.RefreshToken) error {
	ret := _m.Called(rt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RefreshToken) error); ok {
		r0 = rf(rt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: _a0
func (_m *IRepoUser) CreateUser(_a0 *model.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOne provides a mock function with given fields: id
func (_m *IRepoUser) GetOne(id string) (*model.RefreshToken, error) {
	ret := _m.Called(id)

	var r0 *model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.RefreshToken, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.RefreshToken); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneUserByEmail provides a mock function with given fields: email
func (_m *IRepoUser) GetOneUserByEmail(email string) (*model.User, error) {
	ret := _m.Called(email)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepoUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepoUser creates a new instance of IRepoUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepoUser(t mockConstructorTestingTNewIRepoUser) *IRepoUser {
	mock := &IRepoUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
